// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model ApplicationStatus {
  id               Int            @id @default(autoincrement())
  status           String         @default("pending")
  jobApplication   JobApplication @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  jobApplicationId Int            @unique

  @@schema("public")
}

model JobApplication {
  id          Int                @id @default(autoincrement())
  applicant   Applicant          @relation(fields: [applicantId], references: [applicantid], onDelete: Cascade)
  applicantId Int
  job         Job                @relation(fields: [jobId], references: [JobID], onDelete: Cascade)
  jobId       Int
  appliedAt   DateTime           @default(now())
  status      ApplicationStatus?

  @@unique([applicantId, jobId])
  @@schema("public")
}

model Applicant {
  applicantid           Int              @id @default(autoincrement())
  fullname              String
  emailaddress          String
  alternateemailaddress String?
  streetaddress         String?
  city                  String?
  state                 String?
  zipcode               String?
  country               String?
  linkedinurl           String?
  uscitizen             Boolean?
  educationlevel        String?
  parsedResume          Json?
  resumeUrl             String?
  specialty             String?
  dateaddedtodb         DateTime         @default(now())
  jobApplications       JobApplication[]

  @@schema("public")
}

model Organization {
  OrganizationID   Int           @id @default(autoincrement())
  OrganizationName String
  CreationDate     DateTime
  SubscriptionType String?
  AccountStatus    String?
  jobs             Job[]
  profiles         Profile[]
  invitations      Invitations[]

  @@schema("public")
}

model Profile {
  id              String        @id @default(uuid())
  role            String
  first_name      String?
  last_name       String?
  organization_id Int?
  is_locked_out   Boolean?
  creation_date   DateTime      @default(now())
  last_login_date DateTime?
  organization    Organization? @relation(fields: [organization_id], references: [OrganizationID])
  jobs            Job[]

  @@schema("public")
}

model Invitations {
  id             Int          @id @default(autoincrement())
  email          String
  token          String
  organizationId Int
  expires_at     DateTime
  created_at     DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [OrganizationID])

  @@schema("public")
}

model Job {
  JobID                  Int              @id @default(autoincrement())
  OrganizationID         Int?
  UserID                 String
  JobTitle               String
  JobAddressLocation     String
  PostedDate             DateTime         @default(now())
  JobSalary              String
  JobStatus              String
  CandidateResponseCount Int
  TotalApplicantsCount   Int
  JobDescription         String
  ApplicationDeadline    DateTime
  organization           Organization?    @relation(fields: [OrganizationID], references: [OrganizationID])
  profile                Profile          @relation(fields: [UserID], references: [id])
  jobApplications        JobApplication[]
  Slug                   String?          @unique

  @@schema("public")
}
